pipeline {
    agent any

    stages {
        stage("DOCKER UNINSTALL"){
            steps{
                sh 'for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do sudo apt-get remove $pkg; done'
            }
        }
        stage('Docker install') {
            steps {
                sh 'sudo apt-get update'
                sh 'sudo apt-get install ca-certificates curl'
                sh 'sudo install -m 0755 -d /etc/apt/keyrings'
                sh 'sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc'
                sh 'sudo chmod a+r /etc/apt/keyrings/docker.asc'
                sh '''echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null'''
                sh 'sudo apt-get update'
                sh 'sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y'
                sh 'sudo usermod -aG docker $USER'
                sh 'sudo service docker restart'
                sh 'sudo chmod 666 /var/run/docker.sock'
            }
        }
        stage("CHECK BUILD No"){
            steps{
                script{
                def buildNumber = env.BUILD_NUMBER
                println "Build number is ${currentBuild.number}"
                }
            }
        }
        stage("INSTALL AWS CLI"){
            steps{
                sh 'curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"'
                sh 'sudo apt-get install unzip -y'
                // sh 'if [ -d "/var/lib/jenkins/workspace/test/aws*" ]; then echo "Folder exists"; rm -rf /var/lib/jenkins/workspace/test/aws*; else echo "Folder does not exist"; fi'
                // sh 'unzip awscliv2.zip'
                // sh 'sudo ./aws/install'
            }
        }
        // stage("Login to ECR"){
        //     steps{
        //         sh 'aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 013335838002.dkr.ecr.us-east-2.amazonaws.com'
        //     }
        // }
        stage("CLONE THE REPO"){
            steps{
                checkout scmGit(branches: [[name: 'main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/jaga-devops/AquilaCMS.git']])
            }
        }
        stage("BUILD DOCKER IMAGE"){
            steps{
                sh 'docker build -t 013335838002.dkr.ecr.us-east-2.amazonaws.com/web-app:v1.0.$BUILD_NUMBER .'
                sh 'docker images'
            }
        }
        stage("PUSH IMAGE TO ECR"){
            steps{
                sh 'docker push 013335838002.dkr.ecr.us-east-2.amazonaws.com/web-app:v1.0.$BUILD_NUMBER'
            }
        }
    }
}
